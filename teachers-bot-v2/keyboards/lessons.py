from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.navigation import NavigationMixin


class LessonKeyboards(NavigationMixin):
    """Keyboards for lesson management"""
    
    @staticmethod
    def get_lessons_menu() -> InlineKeyboardMarkup:
        buttons = [
            [InlineKeyboardButton(text="üìã –í—Å–µ —É—Ä–æ–∫–∏", callback_data="lessons:list")],
            [InlineKeyboardButton(text="‚è∞ –°–µ–≥–æ–¥–Ω—è", callback_data="lessons:today")],
            [InlineKeyboardButton(text="üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="lessons:week")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", callback_data="lesson:create")]
        ]
        
        buttons = NavigationMixin.add_navigation(buttons, show_back=False)
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def get_lesson_detail_keyboard(lesson_id: int, status: str = "planned") -> InlineKeyboardMarkup:
        buttons = []
        
        # Status-specific actions
        if status == "planned":
            buttons.extend([
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"lesson:confirm:{lesson_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"lesson:cancel:{lesson_id}")
                ]
            ])
        
        # Common actions
        buttons.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"lesson:edit:{lesson_id}")],
            [InlineKeyboardButton(text="üë§ –°—Ç—É–¥–µ–Ω—Ç", callback_data=f"lesson:student:{lesson_id}")],
            [InlineKeyboardButton(text="üí∞ –°—á–µ—Ç", callback_data=f"lesson:invoice:{lesson_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"lesson:delete:{lesson_id}")]
        ])
        
        buttons = NavigationMixin.add_navigation(buttons)
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def get_lesson_edit_keyboard(lesson_id: int) -> InlineKeyboardMarkup:
        buttons = [
            [InlineKeyboardButton(text="üë§ –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data=f"lesson:edit:name:{lesson_id}")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"lesson:edit:price:{lesson_id}")],
            [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data=f"lesson:edit:date:{lesson_id}")],
            [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"lesson:edit:time:{lesson_id}")],
            [InlineKeyboardButton(text="üìù –¢–∏–ø", callback_data=f"lesson:edit:type:{lesson_id}")]
        ]
        
        buttons = NavigationMixin.add_navigation(buttons)
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def get_lesson_type_keyboard() -> InlineKeyboardMarkup:
        buttons = [
            [InlineKeyboardButton(text="üéØ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", callback_data="lesson:type:trial")],
            [InlineKeyboardButton(text="üìö –û—Å–Ω–æ–≤–Ω–æ–π —É—Ä–æ–∫", callback_data="lesson:type:regular")]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def get_lesson_confirmation_keyboard(lesson_id: int) -> InlineKeyboardMarkup:
        """Keyboard for lesson confirmation notifications"""
        buttons = [
            [
                InlineKeyboardButton(text="‚úÖ –£—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–ª—Å—è", callback_data=f"confirm:lesson:{lesson_id}"),
                InlineKeyboardButton(text="‚ùå –£—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è", callback_data=f"cancel:lesson:{lesson_id}")
            ],
            [InlineKeyboardButton(text="üìù –î–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞", callback_data=f"lesson:details:{lesson_id}")]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)