from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from datetime import datetime, date, time
from loguru import logger

from models.states import LessonStates
from services.api_client import api_client, APIError
from keyboards.lessons import LessonKeyboards
from keyboards.navigation import MainMenuKeyboard
from utils.formatters import format_lesson_info, format_lessons_list, format_today_date
from utils.validators import validate_price, validate_lesson_date, validate_lesson_time

router = Router()


@router.callback_query(F.data == "lessons:menu")
async def callback_lessons_menu(callback: CallbackQuery):
    """Show lessons menu"""
    try:
        # Check if teacher is registered
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        text = "üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = LessonKeyboards.get_lessons_menu()
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error in lessons menu: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", show_alert=True)


@router.callback_query(F.data == "lessons:list")
async def callback_lessons_list(callback: CallbackQuery):
    """Show all lessons"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        lessons = await api_client.get_lessons(teacher["id"])
        text = format_lessons_list(lessons, "–í—Å–µ —É—Ä–æ–∫–∏")
        
        # Add action buttons for each lesson
        keyboard_buttons = []
        for lesson in lessons[:5]:  # Show max 5 lessons with buttons
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚ñ∂Ô∏è –£—Ä–æ–∫ #{lesson['id']} - {lesson['student_name']}",
                    callback_data=f"lesson:view:{lesson['id']}"
                )
            ])
        
        # Add navigation
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", callback_data="lesson:create")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="lessons:menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lessons: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤", show_alert=True)


@router.callback_query(F.data == "lessons:today")
async def callback_lessons_today(callback: CallbackQuery):
    """Show today's lessons"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        # Get all lessons and filter for today
        all_lessons = await api_client.get_lessons(teacher["id"])
        today = date.today()
        today_lessons = []
        
        for lesson in all_lessons:
            lesson_date = datetime.fromisoformat(lesson['date_time'].replace('Z', '+00:00')).date()
            if lesson_date == today:
                today_lessons.append(lesson)
        
        text = format_lessons_list(today_lessons, f"–£—Ä–æ–∫–∏ –Ω–∞ {format_today_date()}")
        
        # Add quick actions for today's lessons
        keyboard_buttons = []
        for lesson in today_lessons[:3]:  # Max 3 lessons with buttons
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚ñ∂Ô∏è {lesson['student_name']} –≤ {datetime.fromisoformat(lesson['date_time'].replace('Z', '+00:00')).strftime('%H:%M')}",
                    callback_data=f"lesson:view:{lesson['id']}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìö –í—Å–µ —É—Ä–æ–∫–∏", callback_data="lessons:list")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="lessons:menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting today's lessons: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤", show_alert=True)


@router.callback_query(F.data == "lessons:week")
async def callback_lessons_week(callback: CallbackQuery):
    """Show this week's lessons"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        # Get all lessons and filter for this week
        from datetime import datetime, timedelta, timezone
        all_lessons = await api_client.get_lessons(teacher["id"])
        
        # Calculate week start (Monday) and end (Sunday)
        now = datetime.now(timezone.utc)
        week_start = now - timedelta(days=now.weekday())
        week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0)
        week_end = week_start + timedelta(days=7)
        
        week_lessons = []
        for lesson in all_lessons:
            lesson_date = datetime.fromisoformat(lesson['date_time'].replace('Z', '+00:00'))
            if week_start <= lesson_date < week_end:
                week_lessons.append(lesson)
        
        # Sort by date
        week_lessons.sort(key=lambda x: x['date_time'])
        
        text = format_lessons_list(week_lessons, f"–£—Ä–æ–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')})")
        
        # Add quick actions for week lessons
        keyboard_buttons = []
        for lesson in week_lessons[:3]:  # Max 3 lessons with buttons
            lesson_dt = datetime.fromisoformat(lesson['date_time'].replace('Z', '+00:00'))
            day_name = {0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'}[lesson_dt.weekday()]
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚ñ∂Ô∏è {day_name} {lesson['student_name']} {lesson_dt.strftime('%H:%M')}",
                    callback_data=f"lesson:view:{lesson['id']}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìö –í—Å–µ —É—Ä–æ–∫–∏", callback_data="lessons:list")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="lessons:menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting week's lessons: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("lesson:view:"))
async def callback_lesson_view(callback: CallbackQuery):
    """View lesson details"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        lesson = await api_client.get_lesson(lesson_id)
        
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lesson: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:confirm:"))
async def callback_lesson_confirm(callback: CallbackQuery):
    """Confirm lesson"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        # Confirm lesson via API
        await api_client.confirm_lesson(lesson_id)
        
        await callback.answer("‚úÖ –£—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        
        # Refresh lesson view
        lesson = await api_client.get_lesson(lesson_id)
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error confirming lesson: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:cancel:"))
async def callback_lesson_cancel(callback: CallbackQuery):
    """Cancel lesson"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        # Update lesson status to cancelled
        await api_client.update_lesson(lesson_id, {"status": "cancelled"})
        
        await callback.answer("‚ùå –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω")
        
        # Refresh lesson view
        lesson = await api_client.get_lesson(lesson_id)
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error cancelling lesson: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data == "lesson:create")
async def callback_lesson_create(callback: CallbackQuery, state: FSMContext):
    """Start lesson creation"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        await state.set_state(LessonStates.waiting_for_student_name)
        await state.update_data(teacher_id=teacher["id"])
        
        text = (
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>\n\n"
            "üë§ <b>–®–∞–≥ 1 –∏–∑ 5</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:"
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error starting lesson creation: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", show_alert=True)


@router.message(LessonStates.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    """Process student name input"""
    student_name = message.text.strip()
    
    if len(student_name) < 2:
        await message.answer("‚ùå –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(student_name=student_name)
    await state.set_state(LessonStates.waiting_for_price)
    
    text = (
        f"üí∞ <b>–®–∞–≥ 2 –∏–∑ 5</b>\n"
        f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ —Ä—É–±–ª—è—Ö:"
    )
    
    await message.answer(text)


@router.message(LessonStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """Process price input"""
    price = validate_price(message.text.strip())
    
    if price is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return
    
    await state.update_data(price=price)
    await state.set_state(LessonStates.waiting_for_date)
    
    text = (
        f"üìÖ <b>–®–∞–≥ 3 –∏–∑ 5</b>\n"
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {format_today_date()}</i>"
    )
    
    await message.answer(text)


@router.message(LessonStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """Process date input"""
    date_str = message.text.strip()
    
    if not validate_lesson_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    try:
        lesson_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        # Store as ISO string for JSON serialization
        await state.update_data(lesson_date=lesson_date.isoformat())
        await state.set_state(LessonStates.waiting_for_time)
        
        text = (
            f"‚è∞ <b>–®–∞–≥ 4 –∏–∑ 5</b>\n"
            f"–î–∞—Ç–∞: {lesson_date.strftime('%d.%m.%Y')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30</i>"
        )
        
        await message.answer(text)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.message(LessonStates.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """Process time input"""
    time_str = message.text.strip()
    
    if not validate_lesson_time(time_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú:")
        return
    
    try:
        lesson_time = datetime.strptime(time_str, "%H:%M").time()
        # Store as string for JSON serialization
        await state.update_data(lesson_time=lesson_time.isoformat())
        await state.set_state(LessonStates.waiting_for_type)
        
        text = (
            f"üìù <b>–®–∞–≥ 5 –∏–∑ 5</b>\n"
            f"–í—Ä–µ–º—è: {lesson_time.strftime('%H:%M')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Ä–æ–∫–∞:"
        )
        
        keyboard = LessonKeyboards.get_lesson_type_keyboard()
        await message.answer(text, reply_markup=keyboard)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.callback_query(F.data.startswith("lesson:type:"), LessonStates.waiting_for_type)
async def process_lesson_type(callback: CallbackQuery, state: FSMContext):
    """Process lesson type selection and create lesson"""
    try:
        lesson_type = callback.data.split(":")[2]  # "trial" or "regular"
        data = await state.get_data()
        
        # Parse date and time from stored strings
        lesson_date = datetime.fromisoformat(data["lesson_date"]).date()
        lesson_time = datetime.strptime(data["lesson_time"], "%H:%M:%S").time()
        
        # Combine date and time
        lesson_datetime = datetime.combine(lesson_date, lesson_time)
        
        # Prepare lesson data
        lesson_data = {
            "student_name": data["student_name"],
            "teacher_id": data["teacher_id"],
            "price": data["price"],
            "date_time": lesson_datetime.isoformat(),
            "type": lesson_type
        }
        
        # Create lesson via API
        lesson = await api_client.create_lesson(lesson_data)
        
        await state.clear()
        
        text = (
            f"‚úÖ <b>–£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üÜî <b>ID —É—Ä–æ–∫–∞:</b> {lesson['id']}\n"
            f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {lesson['student_name']}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {lesson_datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {lesson['price']} ‚ÇΩ\n"
            f"üìù <b>–¢–∏–ø:</b> {lesson['type']}"
        )
        
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson['id'], lesson['status'])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω!")
        
    except APIError as e:
        logger.error(f"API error creating lesson: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error creating lesson: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# Handler for lesson confirmation notifications from lesson-checker
@router.callback_query(F.data.startswith("confirm:lesson:"))
async def callback_confirm_lesson_notification(callback: CallbackQuery):
    """Handle lesson confirmation from notification"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        # Confirm lesson via API
        await api_client.confirm_lesson(lesson_id)
        
        text = (
            f"‚úÖ <b>–£—Ä–æ–∫ #{lesson_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"–°—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É."
        )
        
        await callback.message.edit_text(text)
        await callback.answer("‚úÖ –£—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        
    except APIError as e:
        logger.error(f"API error confirming lesson from notification: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel:lesson:"))
async def callback_cancel_lesson_notification(callback: CallbackQuery):
    """Handle lesson cancellation from notification"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        # Cancel lesson via API
        await api_client.update_lesson(lesson_id, {"status": "cancelled"})
        
        text = (
            f"‚ùå <b>–£—Ä–æ–∫ #{lesson_id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–º—Å—è —É—Ä–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
        )
        
        await callback.message.edit_text(text)
        await callback.answer("‚ùå –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω")
        
    except APIError as e:
        logger.error(f"API error cancelling lesson from notification: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.regexp(r"^lesson:edit:\d+$"))
async def callback_lesson_edit_menu(callback: CallbackQuery):
    """Show lesson edit menu"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        lesson = await api_client.get_lesson(lesson_id)
        
        text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ #{lesson_id}</b>\n\n"
            f"{format_lesson_info(lesson)}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        keyboard = LessonKeyboards.get_lesson_edit_keyboard(lesson_id)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lesson for edit: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:edit:name:"))
async def callback_lesson_edit_name(callback: CallbackQuery, state: FSMContext):
    """Start editing lesson student name"""
    try:
        lesson_id = int(callback.data.split(":")[3])
        
        await state.set_state(LessonStates.editing_student_name)
        await state.update_data(lesson_id=lesson_id)
        
        text = (
            f"üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n"
            f"–£—Ä–æ–∫ #{lesson_id}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:"
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.message(LessonStates.editing_student_name)
async def process_lesson_name_edit(message: Message, state: FSMContext):
    """Process lesson name edit"""
    try:
        new_name = message.text.strip()
        
        if len(new_name) < 2:
            await message.answer("‚ùå –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        lesson_id = data["lesson_id"]
        
        # Update lesson via API
        await api_client.update_lesson(lesson_id, {"student_name": new_name})
        
        await state.clear()
        
        text = f"‚úÖ <b>–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n–ù–æ–≤–æ–µ –∏–º—è: {new_name}"
        
        # Show updated lesson
        lesson = await api_client.get_lesson(lesson_id)
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await message.answer(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error updating lesson name: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        await state.clear()


@router.callback_query(F.data.startswith("lesson:edit:price:"))
async def callback_lesson_edit_price(callback: CallbackQuery, state: FSMContext):
    """Start editing lesson price"""
    try:
        lesson_id = int(callback.data.split(":")[3])
        
        await state.set_state(LessonStates.editing_price)
        await state.update_data(lesson_id=lesson_id)
        
        text = (
            f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —É—Ä–æ–∫–∞</b>\n"
            f"–£—Ä–æ–∫ #{lesson_id}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
        )
        
        await callback.message.edit_text(text)
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.message(LessonStates.editing_price)
async def process_lesson_price_edit(message: Message, state: FSMContext):
    """Process lesson price edit"""
    try:
        price = validate_price(message.text.strip())
        
        if price is None:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
            return
        
        data = await state.get_data()
        lesson_id = data["lesson_id"]
        
        # Update lesson via API
        await api_client.update_lesson(lesson_id, {"price": price})
        
        await state.clear()
        
        # Show updated lesson
        lesson = await api_client.get_lesson(lesson_id)
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await message.answer(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error updating lesson price: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
        await state.clear()


@router.callback_query(F.data.regexp(r"^lesson:delete:\d+$"))
async def callback_lesson_delete(callback: CallbackQuery):
    """Delete lesson with confirmation"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        text = (
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ #{lesson_id}</b>\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"lesson:delete:confirm:{lesson_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"lesson:view:{lesson_id}")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:delete:confirm:"))
async def callback_lesson_delete_confirm(callback: CallbackQuery):
    """Confirm lesson deletion"""
    try:
        lesson_id = int(callback.data.split(":")[3])
        
        # Delete lesson via API
        await api_client.delete_lesson(lesson_id)
        
        text = (
            f"‚úÖ <b>–£—Ä–æ–∫ #{lesson_id} —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data="lessons:list")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav:home")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω")
        
    except APIError as e:
        logger.error(f"API error deleting lesson: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:student:"))
async def callback_lesson_student(callback: CallbackQuery):
    """Show student information for lesson"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        lesson = await api_client.get_lesson(lesson_id)
        
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ</b>\n\n"
            f"üìö <b>–£—Ä–æ–∫ #{lesson_id}</b>\n"
            f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {lesson['student_name']}\n"
            f"üí∞ <b>–¶–µ–Ω–∞ —É—Ä–æ–∫–∞:</b> {lesson['price']} ‚ÇΩ\n"
            f"üìù <b>–¢–∏–ø:</b> {lesson['type']}\n\n"
            f"<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</i>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson:view:{lesson_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav:home")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lesson student info: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:invoice:"))
async def callback_lesson_invoice(callback: CallbackQuery):
    """Show invoice for lesson"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        
        # Try to get invoice for this lesson
        try:
            invoice = await api_client.get_invoice_by_lesson(lesson_id)
            
            from utils.formatters import format_invoice_info
            text = format_invoice_info(invoice)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance:dashboard")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson:view:{lesson_id}")]
            ])
            
        except APIError:
            # No invoice found for this lesson
            lesson = await api_client.get_lesson(lesson_id)
            
            if lesson["status"] == "confirmed":
                text = (
                    f"üí≥ <b>–°—á–µ—Ç –¥–ª—è —É—Ä–æ–∫–∞ #{lesson_id}</b>\n\n"
                    f"–°—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                    f"–ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            else:
                text = (
                    f"üí≥ <b>–°—á–µ—Ç –¥–ª—è —É—Ä–æ–∫–∞ #{lesson_id}</b>\n\n"
                    f"–°—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞.\n"
                    f"–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞: {lesson['status']}"
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson:view:{lesson_id}")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lesson invoice: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("lesson:details:"))
async def callback_lesson_details(callback: CallbackQuery):
    """Show lesson details (from notification)"""
    try:
        lesson_id = int(callback.data.split(":")[2])
        lesson = await api_client.get_lesson(lesson_id)
        
        text = format_lesson_info(lesson)
        keyboard = LessonKeyboards.get_lesson_detail_keyboard(lesson_id, lesson["status"])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting lesson details: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞", show_alert=True)