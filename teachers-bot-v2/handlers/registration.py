from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger
import re

from models.states import RegistrationStates
from services.api_client import api_client, APIError
from keyboards.registration import RegistrationKeyboards
from keyboards.navigation import MainMenuKeyboard
from utils.formatters import format_registration_confirmation
from utils.validators import validate_email, validate_phone, validate_bank_account

router = Router()


@router.callback_query(F.data == "register:start")
async def callback_register_start(callback: CallbackQuery):
    """Start registration process"""
    text = (
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–ú—ã —Å–æ–±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ Email\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
    )
    
    keyboard = RegistrationKeyboards.get_start_registration()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "register:info")
async def callback_register_info(callback: CallbackQuery):
    """Show registration info"""
    text = (
        "‚ÑπÔ∏è <b>–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
        "<b>–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è?</b>\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —É—Ä–æ–∫–∞–º–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤\n\n"
        "<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    
    keyboard = RegistrationKeyboards.get_start_registration()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "register:begin")
async def callback_register_begin(callback: CallbackQuery, state: FSMContext):
    """Begin registration process"""
    await state.set_state(RegistrationStates.waiting_for_name)
    
    text = (
        "üë§ <b>–®–∞–≥ 1 –∏–∑ 4</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>"
    )
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """Process teacher name input"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(name) > 255:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(full_name=name)
    await state.set_state(RegistrationStates.waiting_for_phone)
    
    text = (
        "üìû <b>–®–∞–≥ 2 –∏–∑ 4</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67</i>"
    )
    
    await message.answer(text)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """Process phone number input"""
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(phone=phone)
    await _next_step_email(message, state)




async def _next_step_email(message: Message, state: FSMContext):
    """Move to email step"""
    await state.set_state(RegistrationStates.waiting_for_email)
    
    text = (
        "üìß <b>–®–∞–≥ 3 –∏–∑ 4</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: teacher@example.com</i>"
    )
    
    await message.answer(text)


@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """Process email input"""
    email = message.text.strip().lower()
    
    if not validate_email(email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(email=email)
    await _next_step_bank(message, state)




async def _next_step_bank(message: Message, state: FSMContext):
    """Move to bank account step"""
    await state.set_state(RegistrationStates.waiting_for_bank_account)
    
    text = (
        "üè¶ <b>–®–∞–≥ 4 –∏–∑ 4</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 40817810123456789012</i>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ—Ç —Å—á–µ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤!"
    )
    
    await message.answer(text)


@router.message(RegistrationStates.waiting_for_bank_account)
async def process_bank_account(message: Message, state: FSMContext):
    """Process bank account input"""
    bank_account = message.text.strip()
    
    if not validate_bank_account(bank_account):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(bank_account=bank_account)
    await state.set_state(RegistrationStates.confirmation)
    
    # Show confirmation
    data = await state.get_data()
    text = format_registration_confirmation(data)
    
    keyboard = RegistrationKeyboards.get_confirmation()
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "register:confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """Confirm and submit registration"""
    try:
        data = await state.get_data()
        data['tg_id'] = str(callback.from_user.id)
        
        # Create teacher via API
        teacher = await api_client.create_teacher(data)
        
        await state.clear()
        
        text = (
            "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {teacher['full_name']}!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
        )
        
        keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except APIError as e:
        logger.error(f"Registration API error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Registration error: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "register:edit")
async def edit_registration(callback: CallbackQuery):
    """Edit registration data"""
    text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    keyboard = RegistrationKeyboards.get_edit_field()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "register:cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """Cancel registration"""
    await state.clear()
    
    text = (
        "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    )
    
    keyboard = MainMenuKeyboard.get_keyboard(is_registered=False)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")