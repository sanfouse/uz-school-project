from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from loguru import logger

from core.bot import bot
from services.api_client import api_client, APIError
from keyboards.navigation import MainMenuKeyboard, QuickActionsKeyboard
from utils.formatters import format_welcome_message

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(message.from_user.id))
        
        if teacher:
            # Registered user
            welcome_text = format_welcome_message(teacher["full_name"])
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
            
            await message.answer(welcome_text, reply_markup=keyboard)
            
            # Show quick actions
            quick_actions_text = "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
            quick_keyboard = QuickActionsKeyboard.get_keyboard()
            await message.answer(quick_actions_text, reply_markup=quick_keyboard)
            
        else:
            # New user - needs registration
            welcome_text = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Ä–æ–∫–∞–º–∏, —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=False)
            await message.answer(welcome_text, reply_markup=keyboard)
            
    except APIError as e:
        logger.error(f"API error in start command: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logger.error(f"Unexpected error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """Handle /menu command - show main menu"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(message.from_user.id))
        
        if teacher:
            text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        else:
            text = "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=False)
        
        await message.answer(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error in menu command: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")


@router.callback_query(F.data == "nav:home")
async def callback_nav_home(callback: CallbackQuery):
    """Navigate to home menu"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        
        if teacher:
            text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        else:
            text = "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=False)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error in nav home: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.", show_alert=True)


@router.callback_query(F.data == "nav:back")
async def callback_nav_back(callback: CallbackQuery):
    """Navigate back - return to appropriate parent menu"""
    # For now, redirect to main menu since we don't have navigation history
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        
        if teacher:
            text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        else:
            text = "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:"
            keyboard = MainMenuKeyboard.get_keyboard(is_registered=False)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error in nav back: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.", show_alert=True)


@router.callback_query(F.data == "help:main")
async def callback_help_main(callback: CallbackQuery):
    """Show main help"""
    help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìö <b>–£—Ä–æ–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —É—Ä–æ–∫–∞–º–∏
‚Ä¢ üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Å—á–µ—Ç–æ–≤
‚Ä¢ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await callback.message.edit_text(help_text, reply_markup=MainMenuKeyboard.get_keyboard(True))
    await callback.answer()