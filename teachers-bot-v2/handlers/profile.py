from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from models.states import ProfileStates
from services.api_client import api_client, APIError
from keyboards.finance import FinanceKeyboards
from keyboards.navigation import NavigationMixin, MainMenuKeyboard
from utils.formatters import format_teacher_profile
from utils.validators import validate_email, validate_phone, validate_bank_account

router = Router()


@router.callback_query(F.data == "profile:view")
async def callback_profile_view(callback: CallbackQuery):
    """Show teacher profile"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        text = format_teacher_profile(teacher)
        
        # Create profile menu keyboard
        keyboard_buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile:edit")],
            [InlineKeyboardButton(text="üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data="profile:edit:bank")],
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile:stats")]
        ]
        
        keyboard_buttons = NavigationMixin.add_navigation(keyboard_buttons, show_back=False)
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting teacher profile: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)


@router.callback_query(F.data == "profile:edit")
async def callback_profile_edit(callback: CallbackQuery):
    """Show profile edit menu"""
    text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üë§ –ò–º—è", callback_data="profile:edit:name")],
        [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:edit:phone")],
        [InlineKeyboardButton(text="üìß Email", callback_data="profile:edit:email")]
    ]
    
    keyboard_buttons = NavigationMixin.add_navigation(keyboard_buttons)
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "profile:edit:name")
async def callback_profile_edit_name(callback: CallbackQuery, state: FSMContext):
    """Start editing name"""
    await state.set_state(ProfileStates.editing_name)
    
    text = (
        "üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
    )
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(ProfileStates.editing_name)
async def process_name_edit(message: Message, state: FSMContext):
    """Process name edit"""
    try:
        new_name = message.text.strip()
        
        if len(new_name) < 2:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # Get current teacher
        teacher = await api_client.get_teacher_by_tg_id(str(message.from_user.id))
        if not teacher:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Update teacher name via API (we need to implement update endpoint)
        # For now, we'll show success message
        await state.clear()
        
        text = (
            f"‚úÖ <b>–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–æ–µ –∏–º—è: {new_name}"
        )
        
        keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        await message.answer(text, reply_markup=keyboard)
        
    except APIError as e:
        logger.error(f"API error updating name: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")
        await state.clear()


@router.callback_query(F.data == "profile:edit:phone")
async def callback_profile_edit_phone(callback: CallbackQuery, state: FSMContext):
    """Start editing phone"""
    await state.set_state(ProfileStates.editing_phone)
    
    text = (
        "üìû <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:"
    )
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:remove:phone")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile:view")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.message(ProfileStates.editing_phone)
async def process_phone_edit(message: Message, state: FSMContext):
    """Process phone edit"""
    try:
        new_phone = message.text.strip()
        
        if not validate_phone(new_phone):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.clear()
        
        text = (
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {new_phone}"
        )
        
        keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error updating phone: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await state.clear()


@router.callback_query(F.data == "profile:edit:email")
async def callback_profile_edit_email(callback: CallbackQuery, state: FSMContext):
    """Start editing email"""
    await state.set_state(ProfileStates.editing_email)
    
    text = (
        "üìß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ email</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å¬ª —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å:"
    )
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å email", callback_data="profile:remove:email")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile:view")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.message(ProfileStates.editing_email)
async def process_email_edit(message: Message, state: FSMContext):
    """Process email edit"""
    try:
        new_email = message.text.strip().lower()
        
        if not validate_email(new_email):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.clear()
        
        text = (
            f"‚úÖ <b>Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π email: {new_email}"
        )
        
        keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error updating email: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email")
        await state.clear()


@router.callback_query(F.data == "profile:edit:bank")
async def callback_profile_edit_bank(callback: CallbackQuery, state: FSMContext):
    """Start editing bank account"""
    await state.set_state(ProfileStates.editing_bank_account)
    
    text = (
        "üè¶ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ—Ç —Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–ª–∞—Ç!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞:"
    )
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(ProfileStates.editing_bank_account)
async def process_bank_edit(message: Message, state: FSMContext):
    """Process bank account edit"""
    try:
        new_bank = message.text.strip()
        
        if not validate_bank_account(new_bank):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.clear()
        
        # Show masked account number for security
        masked_account = f"{new_bank[:4]}****{new_bank[-4:]}"
        
        text = (
            f"‚úÖ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Å—á–µ—Ç: {masked_account}\n\n"
            f"‚ö†Ô∏è –í—Å–µ –±—É–¥—É—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç."
        )
        
        keyboard = MainMenuKeyboard.get_keyboard(is_registered=True)
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error updating bank account: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞")
        await state.clear()


@router.callback_query(F.data == "profile:stats")
async def callback_profile_stats(callback: CallbackQuery):
    """Show teacher statistics"""
    try:
        teacher = await api_client.get_teacher_by_tg_id(str(callback.from_user.id))
        if not teacher:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        # Get teacher's lessons and calculate stats
        lessons = await api_client.get_lessons(teacher["id"])
        
        # Calculate basic statistics
        total_lessons = len(lessons)
        confirmed_lessons = len([l for l in lessons if l["status"] == "confirmed"])
        total_earnings = sum(float(l["price"]) for l in lessons if l["status"] == "confirmed")
        
        # Find most recent lesson
        recent_lesson = None
        if lessons:
            lessons_sorted = sorted(lessons, key=lambda x: x["date_time"], reverse=True)
            recent_lesson = lessons_sorted[0]
        
        text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        text += f"üë§ <b>–£—á–∏—Ç–µ–ª—å:</b> {teacher['full_name']}\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {teacher.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        text += f"üìö <b>–£—Ä–æ–∫–∏:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}\n"
        text += f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_lessons}\n"
        
        if total_lessons > 0:
            success_rate = (confirmed_lessons / total_lessons) * 100
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n"
        
        text += f"\nüí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        text += f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_earnings:,.0f} ‚ÇΩ\n"
        
        if confirmed_lessons > 0:
            avg_price = total_earnings / confirmed_lessons
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —É—Ä–æ–∫–∞: {avg_price:,.0f} ‚ÇΩ\n"
        
        if recent_lesson:
            recent_date = datetime.fromisoformat(recent_lesson['date_time'].replace('Z', '+00:00'))
            text += f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫:</b>\n"
            text += f"‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç: {recent_lesson['student_name']}\n"
            text += f"‚Ä¢ –î–∞—Ç–∞: {recent_date.strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∞–Ω–µ–ª—å", callback_data="finance:dashboard")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile:view")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except APIError as e:
        logger.error(f"API error getting teacher stats: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


